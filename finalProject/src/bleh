#include "ros/ros.h"
#include "nav_msgs/Odometry.h"
#include <iostream>
#include <iomanip>
#include <fstream>
#include <sstream>
#include <string>
#include <vector>
//#include <move_base_msgs/MoveBaseAction.h>
//#include "simple_action_client.h"
#include <move_base_msgs/MoveBaseAction.h>
#include <actionlib/client/simple_action_client.h>
//#include "move_base_msgs/MoveBaseAction.h"
//This file *also* has been modified, but can serve as a starting point
MoveBaseClient _ac;

int main(int argc, char **argv) {
  ros::init(argc, argv, "main");
  ros::NodeHandle n;
  std::vector<move_base_msgs::MoveBaseGoal> rowStops;
  std::ifstream inFile;

  inFile.open("input.txt");
    if (!inFile) {
        std::cout << "Unable to open file";
        exit(1); // terminate with error
    }

  int currRow = 0;

  for(int row = 0; row < 10; row++) {
      move_base_msgs::MoveBaseGoal g;
      inFile >> g.target_pose.pose.position.x;
      inFile >> g.target_pose.pose.position.y;
      inFile >> g.target_pose.pose.position.z;
      inFile >> g.target_pose.pose.orientation.x;
      inFile >> g.target_pose.pose.orientation.y;
      inFile >> g.target_pose.pose.orientation.z;
      inFile >> g.target_pose.pose.orientation.w;
      rowStops.push_back(g);
  }
  inFile.close();

  _ac("move_base", true);

  while(!_ac.waitForServer(ros::Duration(5.0))){
      ROS_INFO("Waiting for the move_base action server to come up");
   }

  // get robot to move to nav goals
  while(currRow < (int)rowStops.size()) {
    //geometry_msgs::Pose p = rowStops.at(currRow);
    move_base_msgs::MoveBaseGoal goal = rowStops.at(currRow);
    ROS_INFO("Sending goal");
      	_ac.sendGoal(goal);

     	_ac.waitForResult();
   	if(_ac.getState() == actionlib::SimpleClientGoalState::SUCCEEDED)
       	ROS_INFO("Hooray, the base moved");
    	else
       	ROS_INFO("The base failed to move forward");
    }



  // get robot to take pics once it's there



  ros::spin();
  return 0;
}
